
/*
  Vars
  .channels
  .icon
  .id
  .owner
  .permissions
  .xmlname

  funcs
  .getChannels()
*/

public function init(temp.super) {
  this._super = temp.super;
}

/*
  @return {Channel[]}
*/
public function getChannels() {
  temp.url = format(this._super.endpoints.guild.channels, this.id);
  temp.req = this._super.makeRequest("get", temp.url, null, null, null, false);
  
  if (!this._super.checkForError(temp.req)) {
    for (temp.channel : temp.req) {
      temp.channel.join("discord_channel");
      temp.channel.init(this._super);
    }
    return temp.req;
  }
}

/*
  Gets webhooks from guild
  
  @return {Webhook[]}  
*/
public function getWebhooks() {
  temp.req = this._super.makeRequest("get", format(this._super.endpoints.guild.webhooks, this.id), temp.options, null, null, false);

  if (!this._super.checkForError(temp.req)) {
    for (temp.webhook : temp.req) {
      temp.webhook.join("discord_webhook");
      temp.webhook.init(this._super);
    }
    return temp.req;
  }
}

/*
  @param {string} channelName - Name of channel creating
  @param {string} [type=text] - Type of channel, text or voice
  @return {channel} Channel you just created
*/
public function createChannel(temp.channelName, temp.type) {
  temp.headers = "Content-Type: application/json";
  temp.jsonData = "{\"name\": \"" @ temp.channelName @ "\", \"type\": \"" @ (temp.type == null ? "text" : temp.type) @ "\"}";
  temp.url = format(this._super.endpoints.guild.channels, this.id);
  temp.req = this._super.makeRequest("post", temp.url, temp.options, temp.headers, temp.jsonData, false);

  if (!this._super.checkForError(temp.req)) {
    temp.req.join("discord_channel");
    temp.req.init(this._super);
    return temp.req;
  }
}
